/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include <CarDetectorImplFactory.hpp>
#include "CarDetectorImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include "MediaPipelineImpl.hpp"

#define GST_CAT_DEFAULT kurento_car_detector_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoCarDetectorImpl"

namespace kurento
{
namespace module
{
namespace cardetector
{

CarDetectorImpl::CarDetectorImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline, const std::string &path, const std::string &idCam, double scaleFactor, int minNeighbors, int width, int height) : OpenCVFilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline)),
CarDetectorOpenCVImpl(path, idCam, scaleFactor, minNeighbors, width, height)

{
}

std::string CarDetectorImpl::getPath ()
{
  return CarDetectorOpenCVImpl::getPath ();
}

void CarDetectorImpl::setPath (const std::string &path)
{
  CarDetectorOpenCVImpl::setPath (path);
}

std::string CarDetectorImpl::getIdCam ()
{
  return CarDetectorOpenCVImpl::getIdCam ();
}

void CarDetectorImpl::setIdCam (const std::string &idCam)
{
  CarDetectorOpenCVImpl::setIdCam (idCam);
}

double CarDetectorImpl::getScaleFactor ()
{
  return CarDetectorOpenCVImpl::getScaleFactor ();
}

void CarDetectorImpl::setScaleFactor (double scaleFactor)
{
  CarDetectorOpenCVImpl::setScaleFactor (scaleFactor);
}

int CarDetectorImpl::getMinNeighbors ()
{
  return CarDetectorOpenCVImpl::getMinNeighbors ();
}

void CarDetectorImpl::setMinNeighbors (int minNeighbors)
{
  CarDetectorOpenCVImpl::setMinNeighbors (minNeighbors);
}

int CarDetectorImpl::getWidth ()
{
  return CarDetectorOpenCVImpl::getWidth ();
}

void CarDetectorImpl::setWidth (int width)
{
  CarDetectorOpenCVImpl::setWidth (width);
}

int CarDetectorImpl::getHeight ()
{
  return CarDetectorOpenCVImpl::getHeight ();
}

void CarDetectorImpl::setHeight (int height)
{
  CarDetectorOpenCVImpl::setHeight (height);
}

MediaObjectImpl *
CarDetectorImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline, const std::string &path, const std::string &idCam, double scaleFactor, int minNeighbors, int width, int height) const
{
  return new CarDetectorImpl (config, mediaPipeline, path, idCam, scaleFactor, minNeighbors, width, height);
}

CarDetectorImpl::StaticConstructor CarDetectorImpl::staticConstructor;

CarDetectorImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

} /* cardetector */
} /* module */
} /* kurento */

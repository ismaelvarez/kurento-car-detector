/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "CarDetectorInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"

namespace kurento
{
namespace module
{
namespace cardetector
{

std::shared_ptr<MediaPipeline> CarDetectorConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

std::string CarDetectorConstructor::getPath ()
{
  return path;
}

std::string CarDetectorConstructor::getIdCam ()
{
  return idCam;
}

double CarDetectorConstructor::getScaleFactor ()
{
  return scaleFactor;
}

int CarDetectorConstructor::getMinNeighbors ()
{
  return minNeighbors;
}

int CarDetectorConstructor::getWidth ()
{
  return width;
}

int CarDetectorConstructor::getHeight ()
{
  return height;
}

void CarDetectorConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

    s.SerializeNVP (path);

    s.SerializeNVP (idCam);

    s.SerializeNVP (scaleFactor);

    s.SerializeNVP (minNeighbors);

    s.SerializeNVP (width);

    s.SerializeNVP (height);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

    if (!s.JsonValue.isMember ("path") || !s.JsonValue["path"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'path' parameter should be a string");
    }

    s.SerializeNVP (path);

    if (!s.JsonValue.isMember ("idCam") || !s.JsonValue["idCam"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'idCam' parameter should be a string");
    }

    s.SerializeNVP (idCam);

    if (!s.JsonValue.isMember ("scaleFactor") || !s.JsonValue["scaleFactor"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'scaleFactor' parameter should be a double");
    }

    s.SerializeNVP (scaleFactor);

    if (!s.JsonValue.isMember ("minNeighbors") || !s.JsonValue["minNeighbors"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'minNeighbors' parameter should be a integer");
    }

    s.SerializeNVP (minNeighbors);

    if (!s.JsonValue.isMember ("width") || !s.JsonValue["width"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'width' parameter should be a integer");
    }

    s.SerializeNVP (width);

    if (!s.JsonValue.isMember ("height") || !s.JsonValue["height"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'height' parameter should be a integer");
    }

    s.SerializeNVP (height);

  }
}

} /* cardetector */
} /* module */
} /* kurento */

/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "CarDetectorImpl.hpp"
#include "CarDetectorImplFactory.hpp"
#include "CarDetectorInternal.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

using kurento::KurentoException;

namespace kurento
{
namespace module
{
namespace cardetector
{

MediaObjectImpl *CarDetectorImplFactory::createObjectPointer (const boost::property_tree::ptree &conf, const Json::Value &params) const
{
  kurento::JsonSerializer s (false);
  CarDetectorConstructor constructor;

  s.JsonValue = params;
  constructor.Serialize (s);

  return createObject (conf, constructor.getMediaPipeline(), constructor.getPath(), constructor.getIdCam(), constructor.getScaleFactor(), constructor.getMinNeighbors(), constructor.getWidth(), constructor.getHeight() );
}

void
CarDetectorImpl::invoke (std::shared_ptr<MediaObjectImpl> obj, const std::string &methodName, const Json::Value &params, Json::Value &response)
{
  if (methodName == "getPath") {
    std::string ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<CarDetector> (obj)->getPath ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setPath") {
    kurento::JsonSerializer s (false);
    std::string path;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("path") || !s.JsonValue["path"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'path' parameter should be a string");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (path);
      std::dynamic_pointer_cast<CarDetector> (obj)->setPath (path);
    }
    return;
  }

  if (methodName == "getIdCam") {
    std::string ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<CarDetector> (obj)->getIdCam ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setIdCam") {
    kurento::JsonSerializer s (false);
    std::string idCam;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("idCam") || !s.JsonValue["idCam"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'idCam' parameter should be a string");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (idCam);
      std::dynamic_pointer_cast<CarDetector> (obj)->setIdCam (idCam);
    }
    return;
  }

  if (methodName == "getScaleFactor") {
    double ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<CarDetector> (obj)->getScaleFactor ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setScaleFactor") {
    kurento::JsonSerializer s (false);
    double scaleFactor;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("scaleFactor") || !s.JsonValue["scaleFactor"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'scaleFactor' parameter should be a double");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (scaleFactor);
      std::dynamic_pointer_cast<CarDetector> (obj)->setScaleFactor (scaleFactor);
    }
    return;
  }

  if (methodName == "getMinNeighbors") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<CarDetector> (obj)->getMinNeighbors ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setMinNeighbors") {
    kurento::JsonSerializer s (false);
    int minNeighbors;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("minNeighbors") || !s.JsonValue["minNeighbors"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'minNeighbors' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (minNeighbors);
      std::dynamic_pointer_cast<CarDetector> (obj)->setMinNeighbors (minNeighbors);
    }
    return;
  }

  if (methodName == "getWidth") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<CarDetector> (obj)->getWidth ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setWidth") {
    kurento::JsonSerializer s (false);
    int width;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("width") || !s.JsonValue["width"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'width' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (width);
      std::dynamic_pointer_cast<CarDetector> (obj)->setWidth (width);
    }
    return;
  }

  if (methodName == "getHeight") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<CarDetector> (obj)->getHeight ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setHeight") {
    kurento::JsonSerializer s (false);
    int height;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("height") || !s.JsonValue["height"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'height' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (height);
      std::dynamic_pointer_cast<CarDetector> (obj)->setHeight (height);
    }
    return;
  }

  OpenCVFilterImpl::invoke (obj, methodName, params, response);
}

bool
CarDetectorImpl::connect (const std::string &eventType, std::shared_ptr<EventHandler> handler)
{

  if ("CarsDetected" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalCarsDetected.connect ([ &, wh] (CarsDetected event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<CarsDetected> ev_ref (new CarsDetected(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "CarsDetected";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  return OpenCVFilterImpl::connect (eventType, handler);
}

void
CarDetectorImpl::Serialize (JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    try {
      Json::Value v (getId() );

      serializer.JsonValue = v;
    } catch (std::bad_cast &e) {
    }
  } else {
    throw KurentoException (MARSHALL_ERROR,
                            "'CarDetectorImpl' cannot be deserialized as an object");
  }
}
} /* cardetector */
} /* module */
} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::module::cardetector::CarDetectorImpl> &object, JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    if (object) {
      object->Serialize (serializer);
    }
  } else {
    std::shared_ptr<kurento::MediaObjectImpl> aux;
    aux = kurento::module::cardetector::CarDetectorImplFactory::getObject (JsonFixes::getString(serializer.JsonValue) );
    object = std::dynamic_pointer_cast<kurento::module::cardetector::CarDetectorImpl> (aux);
  }
}

void
Serialize (std::shared_ptr<kurento::module::cardetector::CarDetector> &object, JsonSerializer &serializer)
{
  std::shared_ptr<kurento::module::cardetector::CarDetectorImpl> aux = std::dynamic_pointer_cast<kurento::module::cardetector::CarDetectorImpl> (object);

  Serialize (aux, serializer);
  object = std::dynamic_pointer_cast <kurento::module::cardetector::CarDetector> (aux);
}

} /* kurento */
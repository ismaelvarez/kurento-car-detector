/* Autogenerated with kurento-module-creator */

#ifndef __CAR_DETECTOR_OPENCV_IMPL_HPP__
#define __CAR_DETECTOR_OPENCV_IMPL_HPP__

#include <OpenCVProcess.hpp>
#include "CarDetector.hpp"
#include <EventHandler.hpp>
#include "opencv2/objdetect.hpp"

namespace kurento
{
namespace module
{
namespace cardetector
{

class CarDetectorOpenCVImpl : public virtual OpenCVProcess
{
private:
  int carsDetectedLastFrame = -1;
  cv::CascadeClassifier carClassifier;
  std::string path;
  std::string idCam;
  double scaleFactor;
  int minNeighbors;
  int width;
  int height;

public:

  CarDetectorOpenCVImpl (const std::string &path, const std::string &idCam, double scaleFactor, int minNeighbors, int width, int height);

  virtual ~CarDetectorOpenCVImpl() = default;

  virtual void process (cv::Mat &mat);

  virtual std::string getPath ();
  virtual void setPath (const std::string &path);

  virtual std::string getIdCam ();
  virtual void setIdCam (const std::string &idCam);

  virtual double getScaleFactor ();
  virtual void setScaleFactor (double scaleFactor);

  virtual int getMinNeighbors ();
  virtual void setMinNeighbors (int minNeighbors);

  virtual int getWidth ();
  virtual void setWidth (int width);

  virtual int getHeight ();
  virtual void setHeight (int height);
  sigc::signal<void, CarsDetected> signalCarsDetected;

};

} /* cardetector */
} /* module */
} /* kurento */

#endif /*  __CAR_DETECTOR_OPENCV_IMPL_HPP__ */

/* Autogenerated with kurento-module-creator */

#ifndef __CARS_DETECTED_HPP__
#define __CARS_DETECTED_HPP__

#include <json/json.h>
#include <memory>
#include "Media.hpp"

namespace kurento
{
namespace module
{
namespace cardetector
{
class CarsDetected;
} /* cardetector */
} /* module */
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::module::cardetector::CarsDetected> &object, JsonSerializer &s);
}


namespace kurento
{
namespace module
{
namespace cardetector
{

class CarsDetected : public Media
{

public:

  CarsDetected (std::shared_ptr<MediaObject> source, const std::string &type, int carsDetected, const std::string &idCam) : Media (source, type) {
      this->carsDetected = carsDetected;
      this->idCam = idCam;
  };

  CarsDetected (const CarsDetected &copy) : Media (copy) {
      this->carsDetected = copy.carsDetected;
      this->idCam = copy.idCam;
  };

  CarsDetected (const Json::Value &value);

  ~CarsDetected() override = default;

  virtual void setCarsDetected (int carsDetected) {
    this->carsDetected = carsDetected;
  };

  virtual int getCarsDetected () {
    return carsDetected;
  };

  virtual void setIdCam (const std::string &idCam) {
    this->idCam = idCam;
  };

  virtual const std::string &getIdCam () {
    return idCam;
  };

  static std::string getName() {
    return "CarsDetected";
  }

  void Serialize (JsonSerializer &s) override;

protected:

  CarsDetected() = default;

private:
  int carsDetected;
  std::string idCam;

  friend void kurento::Serialize (std::shared_ptr<kurento::module::cardetector::CarsDetected> &event, JsonSerializer &s);
};

} /* cardetector */
} /* module */
} /* kurento */

#endif /*  __CARS_DETECTED_HPP__ */
